Rating System

  âœ… Project Description:

    The goal of the project is to provide an independent rating system for sellers of in-game items (CS:GO, FIFA, Dota, Team Fortress, etc.). The rating is based on comments submitted by users, which are thoroughly verified by trusted individuals. These ratings form the basis for the overall top sellers in various game categories.

  âœ… Roles on the Website:

    The platform will have three roles: Administrator, Seller, and Anonymous User.

  âœ… User Scenarios:

    1) Seller Registration: A Seller visits the site and fills out a form to create their profile. The Administrator reviews the information and approves or declines the request.
    2) Submitting a Comment: An Anonymous User views a Seller's profile and leaves a comment. The Administrator verifies the comment and approves or declines it.
    3) Creating a Seller Profile via Comment (Comment + Registration): If an Anonymous User doesn't find the seller they want to Comment, they can provide additional information to create the Seller's profile. The Administrator reviews the submission and decides to approve or decline it.

  âœ… Core Functionality:

    1) Creating Seller Profiles $
    2) Submitting Comments for Sellers
    3) Calculating Seller Ratings
    4) Compiling Overall Top Sellers Based on Ratings
    5) Filtering by Games and Rating Ranges

  âœ… Registration and Authorization:

    The registration process includes:

    * User enters the required registration details.
    * The system generates a confirmation link (code), stores it in some Cache (Redis, for example), and sends it to the provided email.
    * The confirmation codes have a 24-hour expiration period.
    * Until the email is confirmed, any login attempts will result in an appropriate error message.

  âœ… Model:

    ðŸ‘‰ User Model (Seller or Adminstrator):

        User {
          id:         Integer/UID,
          first_name: String,
          last_name:  String,
          password:   String,
          email:      String,
          created_at: Date,
          role:       Enum
        }

      Additionally Seller should have the ability to reset their password through the standard process:

        * POST        /auth/forgot_password: Submit {email} to receive a reset code via email.
        * POST        /auth/reset: Submit {code, new_password}; the system verifies the code from Redis and, if valid, sets the new password.
        * GET         /auth/check_code: Verify the validity of the reset code and respond accordingly.

    ðŸ‘‰ Comment Model:

        Comment {
          id:         Integer/UID,
          message:    Text,
          author_id:  Integer/UID,
          created_at: Date,
          approved:   Boolean
        }

      REST Endpoints for Comments:

        * POST        /users/:id/ratings: Add a comment linked to a user.
        * GET         /users/:id/ratings: List of seller's comments.
        * GET         /users/:id/ratings/:id: View a specific comment.
        * DELETE      /users/:id/ratings/:id: Delete a comment (only the author can delete).
        * PUT         /users/:id/ratings: Update a comment.

    ðŸ‘‰ Game Object Model:

        GameObject {
          id:         Integer/UID,
          title:      String,
          text:       Text,
          user_id:    Integer/UID,
          created_at: Date,
          updated_at: Date
        }

      REST Endpoints for Game Objects:

        * PUT         /object/:id: Edit an object (only the author can edit).
        * POST        /object: Add a new object.
        * GET         /object: Retrieve game objects.
        * DELETE      /object/:id: Delete an object (only the author can delete).

  âœ… Testing:

    The project requires setting up a testing environment and creating two unit-tests and two integration tests.

  âœ… Project Development Stages:

    1) Design Database Structure: Plan and create the database schema. Attach it to the project as an image or PDF file.
    2) Plan Project Architecture: Design the project's architecture, create the folder and file structure.
    3) Break Down Development Phases and Estimate Time: Divide the project into development phases and provide rough time estimates for each phase.
       Create a file named estimate.md and describe all phases and their durations. Example:

      * Registration: 8h
      * Authorisation: 8h
      * ...

    4) Start developing
    5) It will be good to make commits several times a day, and upon completion of the task, open a pull-request